     1                                  ;Name		Saif Hasan
     2                                  ;Date		3  December 2021
     3                                  ;Assignment	Program 10 : Sort Array
     4                                  ;Description	The program prints a given array (with word sized unsigned integers), sorts the array in ascending order and then prints the sorted array
     5                                  
     6                                  ;;;macro for printing
     7                                  %macro print 2
     8                                     pusha
     9                                     mov eax, 4
    10                                     mov ebx, 1
    11                                     mov ecx, %1
    12                                     mov edx, %2
    13                                     int 80h
    14                                     popa
    15                                  %endmacro
    16                                  
    17                                  
    18                                  SECTION .data
    19 00000000 D007B80B0000FFFF00-     nums:	   dw	 2000, 3000, 0, 65535, 0, 1, 2, 3, 100
    20 00000009 000100020003006400 
    21                                  numslen:   EQU	 ($-nums)
    22                                  
    23                                  ;;;;;;;;;;;;;;extra data
    24                                  ;first header
    25 00000012 4F726967696E616C20-     h1:     db "Original Array", 10, 0
    26 0000001B 41727261790A00     
    27                                  h1len:  equ ($ - h1)
    28                                  
    29                                  ;second header
    30 00000022 536F72746564204172-     h2:    db "Sorted Array", 10, 0
    31 0000002B 7261790A00         
    32                                  h2len: equ ($ - h2)
    33                                  
    34                                  ;clear screen control characters
    35 00000030 1B5B324A                cls:     db      1bh, '[2J'
    36                                  clsLen:  equ     ($-cls)
    37                                  
    38                                  ;cursor position control characters
    39 00000034 1B5B                    pos0    db      1bh, '['
    40 00000036 30                              db      '0'
    41 00000037 3B                              db      ';'
    42 00000038 30                              db      '0'
    43 00000039 48                              db      'H'
    44                                  
    45                                  ;print field to store the string
    46                                  printfield:   db  ""		;for each number we will use 6 characters (5 digits then a space)
    47                                  
    48                                  SECTION .text
    49                                  global _main, _sort, _toString
    50                                  _main:
    51                                  print cls, clsLen	;clearing the screen
    52 00000000 60                  <1>  pusha
    53 00000001 B804000000          <1>  mov eax, 4
    54 00000006 BB01000000          <1>  mov ebx, 1
    55 0000000B B9[30000000]        <1>  mov ecx, %1
    56 00000010 BA04000000          <1>  mov edx, %2
    57 00000015 CD80                <1>  int 80h
    58 00000017 61                  <1>  popa
    59                                  print pos0, 6           ;moving the cursor to the original position
    60 00000018 60                  <1>  pusha
    61 00000019 B804000000          <1>  mov eax, 4
    62 0000001E BB01000000          <1>  mov ebx, 1
    63 00000023 B9[34000000]        <1>  mov ecx, %1
    64 00000028 BA06000000          <1>  mov edx, %2
    65 0000002D CD80                <1>  int 80h
    66 0000002F 61                  <1>  popa
    67                                  print h1, h1len		;printing first header
    68 00000030 60                  <1>  pusha
    69 00000031 B804000000          <1>  mov eax, 4
    70 00000036 BB01000000          <1>  mov ebx, 1
    71 0000003B B9[12000000]        <1>  mov ecx, %1
    72 00000040 BA10000000          <1>  mov edx, %2
    73 00000045 CD80                <1>  int 80h
    74 00000047 61                  <1>  popa
    75                                  
    76                                  
    77                                  ;calling toString which will convert array numbers into string 
    78                                  test2:
    79 00000048 6A09                    push numslen/2
    80 0000004A 68[00000000]            push nums
    81 0000004F E886000000              call _toString
    82 00000054 83C408                  add esp, 8
    83                                  
    84                                  
    85                                  
    86                                  ;we want to call a function with 2 parameters 
    87                                  ;calling sort
    88 00000057 6A09                    push numslen/2		;size is word(2 bytes), so divide by 2
    89 00000059 68[00000000]            push nums
    90 0000005E E836000000              call _sort
    91 00000063 83C408                  add esp, 8
    92                                  
    93                                  ;print sorted array
    94                                  print h2, h2len
    95 00000066 60                  <1>  pusha
    96 00000067 B804000000          <1>  mov eax, 4
    97 0000006C BB01000000          <1>  mov ebx, 1
    98 00000071 B9[22000000]        <1>  mov ecx, %1
    99 00000076 BA0E000000          <1>  mov edx, %2
   100 0000007B CD80                <1>  int 80h
   101 0000007D 61                  <1>  popa
   102 0000007E 6A09                    push numslen/2
   103 00000080 68[00000000]            push nums
   104 00000085 E850000000              call _toString
   105 0000008A 83C408                  add esp, 8
   106                                            
   107                                  lastBreak:
   108                                  ; Normal termination code
   109 0000008D B801000000              mov eax, 1
   110 00000092 BB00000000              mov ebx, 0
   111 00000097 CD80                    int 80h
   112                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   113                                  
   114                                  ;;;;;;;;;;;;;;;;;;;;;sort in ascending order
   115                                  _sort:
   116 00000099 55                      push ebp
   117 0000009A 89E5                    mov ebp, esp
   118 0000009C 53                      push ebx
   119 0000009D BA00000000              mov edx, 0		;offset
   120 000000A2 8B7508                  mov esi, [ebp+8]	;array pointer
   121 000000A5 8B4D0C                  mov ecx, [ebp+12]       ;array length
   122 000000A8 49                      dec ecx
   123 000000A9 BA00000000              mov edx, 0
   124                                  
   125                                  outer:
   126 000000AE 51                        push ecx
   127                                    inner:
   128 000000AF 668B0416                    mov ax, word[esi+edx]
   129 000000B3 668B5C1602                  mov bx, word[esi+edx+2]
   130 000000B8 6639D8                      cmp ax, bx
   131 000000BB 7702                        ja swap
   132 000000BD EB0B                        jmp next
   133                                      swap:
   134 000000BF 6693                          xchg ax, bx
   135 000000C1 66890416                      mov word[esi+edx], ax
   136 000000C5 66895C1602                    mov word[esi+edx+2], bx
   137                                      next:
   138 000000CA 83C202                        add edx, 2
   139 000000CD E2E0                      loop inner
   140 000000CF 59                        pop ecx
   141 000000D0 BA00000000                mov edx, 0
   142 000000D5 E2D7                    loop outer
   143                                  
   144 000000D7 5B                      pop ebx
   145 000000D8 5D                      pop ebp
   146 000000D9 C3                      ret
   147                                  
   148                                  ;;;;;;;;;;;;;;;;;function to convert integers into a string for printing 
   149                                  _toString:
   150 000000DA 55                      push ebp
   151 000000DB 89E5                    mov ebp, esp
   152 000000DD 53                      push ebx
   153 000000DE 8B7508                  mov esi, [ebp+8]	;array pointer
   154 000000E1 8B4D0C                  mov ecx, [ebp+12]       
   155                                  top:
   156                                    ;get the 1st digit from the right (1th place digit)
   157 000000E4 31C0                      xor   eax, eax
   158 000000E6 6631D2                    xor   dx, dx
   159 000000E9 668B06                    mov   ax, word[esi]         ;the dividend in dx:ax
   160 000000EC 66BB0A00                  mov   bx,  10		        ;the divisor in bx
   161 000000F0 66F7F3                    div   bx			;we get quotient in ax, remainder in dx
   162 000000F3 6683C230                  add   dx, '0'
   163 000000F7 8815[3E000000]            mov	byte[printfield+4], dl 
   164                                    ;get 10th place digit
   165 000000FD 6631D2                    xor dx, dx               
   166 00000100 66F7F3                    div bx
   167 00000103 6683C230                  add dx, '0'
   168 00000107 8815[3D000000]            mov byte[printfield+3], dl
   169                                    ;get 100th place digit
   170 0000010D 6631D2                    xor dx, dx
   171 00000110 66F7F3                    div bx
   172 00000113 6683C230                  add dx, '0'
   173 00000117 8815[3C000000]            mov byte[printfield+2], dl
   174                                    ;get 1000th place digit
   175 0000011D 6631D2                    xor dx, dx
   176 00000120 66F7F3                    div bx
   177 00000123 6683C230                  add dx, '0'
   178 00000127 8815[3B000000]            mov byte[printfield+1], dl
   179                                    ;get 10000th place digit
   180 0000012D 6631D2                    xor dx, dx
   181 00000130 66F7F3                    div bx
   182 00000133 6683C230                  add dx, '0'
   183 00000137 8815[3A000000]            mov byte[printfield], dl
   184                                    ;put space
   185 0000013D C605[3F000000]0A          mov   byte[printfield+5], 0Ah
   186                                    ;print and increse offset
   187                                    print printfield, 6
   188 00000144 60                  <1>  pusha
   189 00000145 B804000000          <1>  mov eax, 4
   190 0000014A BB01000000          <1>  mov ebx, 1
   191 0000014F B9[3A000000]        <1>  mov ecx, %1
   192 00000154 BA06000000          <1>  mov edx, %2
   193 00000159 CD80                <1>  int 80h
   194 0000015B 61                  <1>  popa
   195 0000015C 83C602                    add esi, 2
   196 0000015F E283                    loop top  
   197 00000161 5B                      pop ebx
   198 00000162 5D                      pop ebp
   199 00000163 C3                      ret
