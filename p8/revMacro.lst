     1                                  ;Name		Saif Hasan
     2                                  ;Date		12 November 2021
     3                                  ;Assignment	Program 8 : Reverse Array with Macros
     4                                  ;Description	The program name is self explanatory! 
     5                                  
     6                                  %macro revArray 2
     7                                   pusha
     8                                   ;push array elements into stack
     9                                   mov ebx, 0
    10                                   mov ecx, %2/4
    11                                   %%top1:
    12                                   mov edx, [%1 + ebx]
    13                                   push edx
    14                                   add ebx, 4
    15                                   loop %%top1
    16                                   ;pop array elements and place them back into array
    17                                   mov ebx, 0
    18                                   mov ecx, %2/4
    19                                   %%top2:
    20                                   pop edx
    21                                   mov dword[%1 + ebx], edx
    22                                   add ebx, 4
    23                                   loop %%top2
    24                                   popa
    25                                  %endmacro
    26                                  
    27                                  
    28                                  SECTION .data
    29 00000000 010000000200000003-     array1: dd      1,2,3,4,5
    30 00000009 000000040000000500-
    31 00000012 0000               
    32                                  len1:   EQU     ($-array1)
    33                                  
    34                                  
    35 00000014 F6FFFFFFF7FFFFFFF8-     array2: dd      -10, -9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9
    36 0000001D FFFFFFF9FFFFFFFAFF-
    37 00000026 FFFFFBFFFFFFFCFFFF-
    38 0000002F FFFDFFFFFFFEFFFFFF-
    39 00000038 FFFFFFFF0000000001-
    40 00000041 000000020000000300-
    41 0000004A 000004000000050000-
    42 00000053 000600000007000000-
    43 0000005C 0800000009000000   
    44                                  len2:   EQU     ($-array2)
    45                                  
    46                                  
    47 00000064 000000000A00000014-     array3: dd  0,10,20,30,40,50,60,70,80,90
    48 0000006D 0000001E0000002800-
    49 00000076 0000320000003C0000-
    50 0000007F 004600000050000000-
    51 00000088 5A000000           
    52 0000008C 640000006E00000078-       dd  100,110,120,130,140,150,160,170,180,190
    53 00000095 000000820000008C00-
    54 0000009E 000096000000A00000-
    55 000000A7 00AA000000B4000000-
    56 000000B0 BE000000           
    57 000000B4 C8000000D2000000DC-       dd  200,210,220,230,240,250,260,270,280,290
    58 000000BD 000000E6000000F000-
    59 000000C6 0000FA000000040100-
    60 000000CF 000E01000018010000-
    61 000000D8 22010000           
    62 000000DC 2C0100003601000040-       dd  300,310,320,330,340,350,360,370,380,390
    63 000000E5 0100004A0100005401-
    64 000000EE 00005E010000680100-
    65 000000F7 00720100007C010000-
    66 00000100 86010000           
    67 00000104 900100009A010000A4-       dd  400,410,420,430,440,450,460,470,480,490,500
    68 0000010D 010000AE010000B801-
    69 00000116 0000C2010000CC0100-
    70 0000011F 00D6010000E0010000-
    71 00000128 EA010000F4010000   
    72                                  len3:   EQU     ($-array3)
    73                                  
    74                                  
    75                                  SECTION .text
    76                                  global _main
    77                                  _main:
    78                                  
    79                                  start:
    80 00000000 B842010000                      mov      eax,322 	      ;; value to check at end	
    81                                          revArray array1, len1
    82 00000005 60                  <1>  pusha
    83                              <1> 
    84 00000006 BB00000000          <1>  mov ebx, 0
    85 0000000B B905000000          <1>  mov ecx, %2/4
    86                              <1>  %%top1:
    87 00000010 8B93[00000000]      <1>  mov edx, [%1 + ebx]
    88 00000016 52                  <1>  push edx
    89 00000017 83C304              <1>  add ebx, 4
    90 0000001A E2F4                <1>  loop %%top1
    91                              <1> 
    92 0000001C BB00000000          <1>  mov ebx, 0
    93 00000021 B905000000          <1>  mov ecx, %2/4
    94                              <1>  %%top2:
    95 00000026 5A                  <1>  pop edx
    96 00000027 8993[00000000]      <1>  mov dword[%1 + ebx], edx
    97 0000002D 83C304              <1>  add ebx, 4
    98 00000030 E2F4                <1>  loop %%top2
    99 00000032 61                  <1>  popa
   100                                          revArray array2, len2
   101 00000033 60                  <1>  pusha
   102                              <1> 
   103 00000034 BB00000000          <1>  mov ebx, 0
   104 00000039 B914000000          <1>  mov ecx, %2/4
   105                              <1>  %%top1:
   106 0000003E 8B93[14000000]      <1>  mov edx, [%1 + ebx]
   107 00000044 52                  <1>  push edx
   108 00000045 83C304              <1>  add ebx, 4
   109 00000048 E2F4                <1>  loop %%top1
   110                              <1> 
   111 0000004A BB00000000          <1>  mov ebx, 0
   112 0000004F B914000000          <1>  mov ecx, %2/4
   113                              <1>  %%top2:
   114 00000054 5A                  <1>  pop edx
   115 00000055 8993[14000000]      <1>  mov dword[%1 + ebx], edx
   116 0000005B 83C304              <1>  add ebx, 4
   117 0000005E E2F4                <1>  loop %%top2
   118 00000060 61                  <1>  popa
   119                                          revArray array3, len3
   120 00000061 60                  <1>  pusha
   121                              <1> 
   122 00000062 BB00000000          <1>  mov ebx, 0
   123 00000067 B933000000          <1>  mov ecx, %2/4
   124                              <1>  %%top1:
   125 0000006C 8B93[64000000]      <1>  mov edx, [%1 + ebx]
   126 00000072 52                  <1>  push edx
   127 00000073 83C304              <1>  add ebx, 4
   128 00000076 E2F4                <1>  loop %%top1
   129                              <1> 
   130 00000078 BB00000000          <1>  mov ebx, 0
   131 0000007D B933000000          <1>  mov ecx, %2/4
   132                              <1>  %%top2:
   133 00000082 5A                  <1>  pop edx
   134 00000083 8993[64000000]      <1>  mov dword[%1 + ebx], edx
   135 00000089 83C304              <1>  add ebx, 4
   136 0000008C E2F4                <1>  loop %%top2
   137 0000008E 61                  <1>  popa
   138                                  lastBreak:
   139                                  
   140                                  ; Normal termination code
   141 0000008F B801000000              mov eax, 1
   142 00000094 BB00000000              mov ebx, 0
   143 00000099 CD80                    int 80h
   144                                  
