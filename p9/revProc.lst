     1                                  ;Name		Saif Hasan
     2                                  ;Date		17 November 2021
     3                                  ;Assignment	Program 9 : Reverse Array with a Proc 
     4                                  ;Description	The program name is self explanatory! (Proc is procedure/function.)
     5                                  
     6                                  
     7                                  SECTION .data
     8 00000000 010000000200000003-     array1: dd      1,2,3,4,5
     9 00000009 000000040000000500-
    10 00000012 0000               
    11                                  len1:   EQU     ($-array1)
    12                                  
    13                                  
    14 00000014 F6FFFFFFF7FFFFFFF8-     array2: dd      -10, -9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9
    15 0000001D FFFFFFF9FFFFFFFAFF-
    16 00000026 FFFFFBFFFFFFFCFFFF-
    17 0000002F FFFDFFFFFFFEFFFFFF-
    18 00000038 FFFFFFFF0000000001-
    19 00000041 000000020000000300-
    20 0000004A 000004000000050000-
    21 00000053 000600000007000000-
    22 0000005C 0800000009000000   
    23                                  len2:   EQU     ($-array2)
    24                                  
    25                                  
    26 00000064 000000000A00000014-     array3: dd  0,10,20,30,40,50,60,70,80,90
    27 0000006D 0000001E0000002800-
    28 00000076 0000320000003C0000-
    29 0000007F 004600000050000000-
    30 00000088 5A000000           
    31 0000008C 640000006E00000078-       dd  100,110,120,130,140,150,160,170,180,190
    32 00000095 000000820000008C00-
    33 0000009E 000096000000A00000-
    34 000000A7 00AA000000B4000000-
    35 000000B0 BE000000           
    36 000000B4 C8000000D2000000DC-       dd  200,210,220,230,240,250,260,270,280,290
    37 000000BD 000000E6000000F000-
    38 000000C6 0000FA000000040100-
    39 000000CF 000E01000018010000-
    40 000000D8 22010000           
    41 000000DC 2C0100003601000040-       dd  300,310,320,330,340,350,360,370,380,390
    42 000000E5 0100004A0100005401-
    43 000000EE 00005E010000680100-
    44 000000F7 00720100007C010000-
    45 00000100 86010000           
    46 00000104 900100009A010000A4-       dd  400,410,420,430,440,450,460,470,480,490,500
    47 0000010D 010000AE010000B801-
    48 00000116 0000C2010000CC0100-
    49 0000011F 00D6010000E0010000-
    50 00000128 EA010000F4010000   
    51                                  len3:   EQU     ($-array3)
    52                                  
    53                                  
    54                                  SECTION .text
    55                                  global _main, _revArray
    56                                  _main:
    57                                  
    58 00000000 60                      pusha			;in case we need to save register values
    59                                  
    60                                  ;we want to call a function with 2 parameters (array, len)
    61                                  ;since parameters are passed in reverse order we push the length first, then the array (which is the address of the first element)
    62                                  
    63                                  ;first call for array1
    64 00000001 6A05                    push len1/4		;divide by 4 to get number of elements in array, because each element is double sized
    65 00000003 68[00000000]            push array1
    66 00000008 E82E000000              call _revArray
    67 0000000D 83C408                  add esp, 8  		;2 parameters were passed, each were double sized (4 bytes), so we add 8 to the stack pointer (clearing the stack)
    68                                  
    69                                  ;second call for array2
    70 00000010 6A14                    push len2/4             
    71 00000012 68[14000000]            push array2
    72 00000017 E81F000000              call _revArray
    73 0000001C 83C408                  add esp, 8              
    74                                  
    75                                  ;third call for array3
    76 0000001F 6A33                    push len3/4             
    77 00000021 68[64000000]            push array3
    78 00000026 E810000000              call _revArray
    79 0000002B 83C408                  add esp, 8              
    80                                  
    81 0000002E 61                      popa			;restoring all register values after function calls
    82                                  
    83                                  lastBreak:
    84                                  ; Normal termination code
    85 0000002F B801000000              mov eax, 1
    86 00000034 BB00000000              mov ebx, 0
    87 00000039 CD80                    int 80h
    88                                  
    89                                  ;;;;;;reverse array function
    90                                  _revArray:
    91 0000003B 55                      push ebp
    92 0000003C 89E5                    mov ebp, esp
    93 0000003E 53                      push ebx 		;since ebx is callee saved, we can save it once we are inside the function
    94 0000003F 8B5D08                  mov ebx, [ebp+8] 	;get address of the array into ebx
    95 00000042 B800000000              mov eax, 0		;eax will be used to store array values
    96 00000047 BA00000000              mov edx, 0		;this is our offset for traversing the array
    97 0000004C 8B4D0C                  mov ecx, [ebp+12]       ;put array size into ecx, we will need this to run a loop
    98                                  ;pushing all array elements into stack
    99                                  reverse1: 
   100 0000004F FF3413                    push dword[ebx+edx]
   101 00000052 83C204                    add edx, 4
   102 00000055 E2F8                    loop reverse1
   103                                  ;reset edx and ecx for popping elements, popping them will put back in reverse order
   104 00000057 BA00000000              mov edx, 0
   105 0000005C 8B4D0C                  mov ecx, [ebp+12]
   106                                  reverse2:
   107 0000005F 8F0413                    pop dword[ebx+edx]
   108 00000062 83C204                    add edx, 4
   109 00000065 E2F8                    loop reverse2
   110                                  ;this should pop back all array elements in the array address
   111                                  ;once this is done we need to pop ebx and ebp, before returning to main
   112 00000067 5B                      pop ebx
   113 00000068 5D                      pop ebp
   114 00000069 C3                      ret
   115                                   
